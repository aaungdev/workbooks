
Hello,

I’d like to propose including either “Submission” or “Model Development” as a keyword in Jira submission tickets.

In Central, I am connecting MMR deliverables data with the capacity value from each deliverable ticket. This analysis helps identify how much capacity each submission requires, enabling us to better predict future submissions and quickly determine if we can take on a new model. The purpose is purely for central reporting and analysis.

For OMR, RAI, and RMs work, you’ve added “BAU,” which helps with pulling the data. However, submission summaries are not consistently using standard keywords.

Could you add or provide the keyword(s) you plan to use for Banking Book submission deliverable tickets? This will help ensure consistency and improve our analysis.

Thank you for your support.

=SUM(
  SUMIFS('WORK DRIVER'!GC:GC, 'WORK DRIVER'!CQ:CQ, STATIC!B5, 'WORK DRIVER'!CV:CV, "MRM Tasks"),
  SUMIFS('WORK DRIVER'!GC:GC, 'WORK DRIVER'!CQ:CQ, STATIC!B5, 'WORK DRIVER'!CV:CV, "OMRs"),
  SUMIFS('WORK DRIVER'!GC:GC, 'WORK DRIVER'!CQ:CQ, STATIC!B5, 'WORK DRIVER'!CV:CV, "RAIs"),
  SUMIFS('WORK DRIVER'!GC:GC, 'WORK DRIVER'!CQ:CQ, STATIC!B5, 'WORK DRIVER'!CV:CV, "RMs")
)

=IFERROR(INDEX(STATIC!A:A, MATCH(Model Capacity Aggregate!K3, STATIC!D:D, 0)), "")
=SUM(SUMIFS('Capacity Plan'!W:W,
            'Capacity Plan'!F:F,E3,
            'Capacity Plan'!G:G,"*2025*",
            'Capacity Plan'!E:E,{"*BAU*","*RAI*","*OMR*"}))
Category:
Indicate whether the repository is a model, tool, or other type.
# Your Jira credentials and base URL — replace these with your real values
ENV_VALUES = {
    "JIRA_API_TOKEN": "your_api_token_here",
    "JIRA_BASE_URL": "https://yourcompany.atlassian.net",
}

class JiraQuerier:
    _jira_api = None  # Class variable to hold Jira client instance

    @classmethod
    def setup_jira_api(cls):
        # Initialize Jira API client if not already done
        if cls._jira_api is None:
            cls._jira_api = JIRA(
                token_auth=ENV_VALUES["JIRA_API_TOKEN"],  # Use API token for authentication
                server=ENV_VALUES["JIRA_BASE_URL"],       # Jira instance URL
                kerberos=True,                            # Enable Kerberos authentication (per your original code)
                options={"verify": False},                # Disable SSL verification (use with caution)
            )

    @classmethod
    def get_components_by_project(cls, project_key):
        cls.setup_jira_api()  # Make sure Jira client is ready

        jql = f'project = {project_key}'  # Jira Query Language string to get all issues for the project
        issues = cls._jira_api.search_issues(jql, maxResults=50)  # Fetch up to 50 issues

        result = {}  # Dictionary to store results: issue_key -> list of component names

        for issue in issues:
            comps = issue.fields.components  # Access the components field from issue
            # Extract component names if any, else empty list
            comp_names = [c.name for c in comps] if comps else []
            result[issue.key] = comp_names  # Store component names keyed by issue key

        return result  # Return the dictionary of issue components

# Main block runs when script is executed directly
if __name__ == "__main__":
    components = JiraQuerier.get_components_by_project("GRAAMG")  # Query project GRAAMG

    # Print each issue's key and its Component(s)
    for issue_key, comp_list in components.items():
        print(f"{issue_key}: Component(s) = {comp_list}")